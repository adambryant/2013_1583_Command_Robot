// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc1583.CommandRobot;
import edu.wpi.first.wpilibj.buttons.DigitalIOButton;
import org.usfirst.frc1583.CommandRobot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc1583.CommandRobot.commands.groups.Climb30Step1CommandGroup;
import org.usfirst.frc1583.CommandRobot.commands.groups.Climb30Step1aCommandGroup;
import org.usfirst.frc1583.CommandRobot.commands.groups.Climb30Step1bCommandGroup;
import org.usfirst.frc1583.CommandRobot.commands.groups.Climb30Step1cCommandGroup;
import org.usfirst.frc1583.CommandRobot.commands.groups.Climb30Step1dCommandGroup;
import org.usfirst.frc1583.CommandRobot.commands.groups.Climb30Step2aCommandGroup;
import org.usfirst.frc1583.CommandRobot.commands.groups.ResetCommandGroup;
import org.usfirst.frc1583.CommandRobot.commands.groups.TestShuttleToBottomCountedCommandGroup;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI
{
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public DigitalIOButton abortButton;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        abortButton = new DigitalIOButton(1);
        abortButton.whenPressed(new AbortCommand());
	    
        // SmartDashboard Buttons
//        SmartDashboard.putData("AbortCommand", new AbortCommand());
//        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("ArmToTopCommand", new ShuttleToTopCommand());
        SmartDashboard.putData("ArmToBottomCommand", new ShuttleToBottomCommand());
        SmartDashboard.putData("CGCenterCommand", new CGCenterCommand());
        SmartDashboard.putData("CGFullBackCommand", new CGFullBackCommand());
        SmartDashboard.putData("CGFullForwardCommand", new CGFullForwardCommand());
        SmartDashboard.putData("CGHalfBackCommand", new CGHalfBackCommand());
        SmartDashboard.putData("CGHalfForwardCommand", new CGHalfForwardCommand());
        SmartDashboard.putData("ResetCommandGroup", new ResetCommandGroup());
        SmartDashboard.putData("Climb30Step1aCommandGroup", new Climb30Step1aCommandGroup());
        SmartDashboard.putData("Climb30Step1bCommandGroup", new Climb30Step1bCommandGroup());
        SmartDashboard.putData("Climb30Step1cCommandGroup", new Climb30Step1cCommandGroup());
        SmartDashboard.putData("Climb30Step1dCommandGroup", new Climb30Step1dCommandGroup());
        SmartDashboard.putData("Climb30Step2aCommandGroup", new Climb30Step2aCommandGroup());
        SmartDashboard.putData("Climb30Step1CommandGroup", new Climb30Step1CommandGroup());
        SmartDashboard.putData("TestShuttleToBottomCountedCommandGroup", new TestShuttleToBottomCountedCommandGroup());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

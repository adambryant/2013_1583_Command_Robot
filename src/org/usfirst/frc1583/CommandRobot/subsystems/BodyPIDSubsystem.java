// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc1583.CommandRobot.subsystems;
import com.rop.output.ContinuousRotationServo;
import org.usfirst.frc1583.CommandRobot.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 *
 */
public class BodyPIDSubsystem extends PIDSubsystem
{
    Preferences prefs;

    public final double CG_FULL_BACK;
    public final double CG_HALF_BACK;
    public final double CG_CENTER;
    public final double CG_HALF_FORWARD;
    public final double CG_FULL_FORWARD;

    ContinuousRotationServo motor = RobotMap.bodyPIDSubsystemMotor;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel pot = RobotMap.bodyPIDSubsystemPot;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Initialize your subsystem here
    public BodyPIDSubsystem()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("BodyPIDSubsystem",0.4, 0.05, 0.00 );

        prefs = Preferences.getInstance();
        this.getPIDController().setPID(
                prefs.getDouble( "kP", 0.4),
                prefs.getDouble( "kI", 0.05),
                prefs.getDouble( "kD", 0.00) );
        
        setAbsoluteTolerance(10.0);//       0.2);
        getPIDController().setContinuous(false);
//        getPIDController().setOutputRange( -1.0, 1.0);
        LiveWindow.addActuator("Body PID Subsystem", "PIDSubsystem Controller", getPIDController());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
        CG_FULL_BACK     = prefs.getDouble( "CgFullBack", 0.80);
        CG_HALF_BACK     = prefs.getDouble( "CgHalfBack", 1.75);
        CG_CENTER        = prefs.getDouble( "CgCenter", 2.50);
        CG_HALF_FORWARD  = prefs.getDouble( "CgHalfForward", 3.15);
        CG_FULL_FORWARD  = prefs.getDouble( "CgFullForward", 3.75);
    }
    public void initDefaultCommand()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    protected double returnPIDInput()
    {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return pot.getAverageVoltage();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    protected void usePIDOutput( double output )
    {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        motor.pidWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
}
